{"version":3,"file":"static/js/951.7f616a63.chunk.js","mappings":"qRAEaA,EAAaC,EAAAA,GAAAA,IAAH,8UAqBVC,EAAYD,EAAAA,GAAAA,GAAH,gG,kBC8BtB,MA/CA,WACE,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,8GAESC,EAAAA,EAAAA,IAAS,CAC9BC,MAAOC,EAAAA,GAAAA,QACPC,GAAIV,IAJQ,OAERW,EAFQ,OAMdP,GAAgB,OAAIO,EAASC,OANf,gDAQdC,EAAAA,GAAAA,MAAY,KAAMC,SARJ,yDAAH,qDAWbR,GACD,GAAE,CAACN,KAGF,4BACE,wBAAI,UACJ,SAACD,EAAD,UACGI,EAAaY,KAAI,YAA4C,IAAzCL,EAAwC,EAAxCA,GAAIM,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAC3C,OACE,yBACE,UAACrB,EAAD,YACE,gBACEsB,IAAG,UAAKC,EAAAA,GAAL,YAAkBC,EAAAA,GAAlB,YAA+BJ,GAClCK,IAAKN,EACLO,MAAO,OAET,iBAAKC,UAAU,cAAf,WACA,iBAAMA,UAAU,aAAhB,SAA6B,YAC7B,uBAAIR,KACJ,iBAAMQ,UAAU,kBAAhB,SAAkC,iBAClC,uBAAIN,WAXCR,EAgBZ,QAIR,C","sources":["components/pages/cast/Cast.styled.js","components/pages/cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorBlock = styled.div`\nwidth: 160px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 4px;\n  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.6);\n    & .actor-inner {\n        padding: 5px;\n    }\n  & img {\n    border-radius: 4px;\n  }\n\n  & span {\n    font-weight: 500;\n  }\n  & .actor-name {\n    margin-top: 10px;\n  }\n`;\n\nexport const ActorList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap:10px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchApi, { apiRefs, imageSize, IMAGE_URL } from 'utilities/api-service';\nimport { ActorBlock, ActorList } from './Cast.styled';\nimport { toast } from 'react-toastify';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [movieCredits, setMovieCredits] = useState([]);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n      const response = await fetchApi({\n        param: apiRefs.CREDITS,\n        id: movieId,\n      });\n      setMovieCredits([...response.cast]);\n    } catch (error) {\n      toast.error(error.message);\n    }\n    };\n    getData();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h5>Cast</h5>\n      <ActorList>\n        {movieCredits.map(({ id, name, profile_path, character }) => {\n          return (\n            <li key={id}>\n              <ActorBlock>\n                <img\n                  src={`${IMAGE_URL}/${imageSize}/${profile_path}`}\n                  alt={name}\n                  width={160}\n                />\n                <div className='actor-inner'>\n                <span className=\"actor-name\">Actor:</span>\n                <p>{name}</p>\n                <span className=\"actor-character\">Character: </span>\n                <p>{character}</p>\n                </div>\n              </ActorBlock>\n            </li>\n          );\n        })}\n      </ActorList>\n    </div>\n  );\n}\n\nexport default Cast;\n"],"names":["ActorBlock","styled","ActorList","movieId","useParams","useState","movieCredits","setMovieCredits","useEffect","getData","fetchApi","param","apiRefs","id","response","cast","toast","message","map","name","profile_path","character","src","IMAGE_URL","imageSize","alt","width","className"],"sourceRoot":""}